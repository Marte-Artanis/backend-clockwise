🚀 Plano Tático — 3 Dias para Entrega (Backend First)

📅 SEGUNDA-FEIRA: Fundação (Base Sólida)

🌅 Manhã - Setup (9h-12h):
1. [30min] Inicializar projeto
   - Criar estrutura de pastas
   - Setup TypeScript + ESLint
   - Instalar dependências base

2. [30min] Setup Docker (OBRIGATÓRIO)
   - Criar Dockerfile
   - Configurar docker-compose.yml
   - Testar build local

3. [30min] Releitura do Protótipo Figma (OBRIGATÓRIO)
   - Analisar protótipo original
   - Criar nova versão melhorada
   - Documentar mudanças de UX/UI

4. [1h] Setup Supabase
   - Criar projeto
   - Configurar tabelas
   - Implementar índices
   - Testar conexão

5. [1h] Estrutura Base
   - Configurar Fastify
   - Implementar error handling
   - Criar estrutura de módulos
   - Setup básico de auth

🌇 Tarde - Core Features (14h-18h):
1. [2h] Implementar Autenticação
   - Login/Registro básico
   - Middleware de auth
   - Rotas protegidas
   - Testes unitários do UserService (/tests/unit/users/service.test.ts)

2. [2h] Clock Module Base
   - Repository layer
   - Service layer básico
   - Controllers base
   - Testes unitários do ClockService (/tests/unit/clock/service.test.ts)

📅 TERÇA-FEIRA: Funcionalidades Core

🌅 Manhã - Features Essenciais (9h-12h):
1. [1.5h] Clock-in/Clock-out
   - Implementar registro de ponto
   - Validações básicas
   - Atualizar testes unitários conforme novas funcionalidades

2. [1.5h] Consultas Essenciais
   - Status atual
   - Horas do dia
   - Histórico básico

🌇 Tarde - Regras de Negócio (14h-18h):
1. [2h] Validações e Regras
   - Impedir múltiplos turnos
   - Validar horários
   - Calcular horas trabalhadas

2. [2h] Testes de Integração
   - Testar fluxos principais
   - Validar regras de negócio
   - Corrigir bugs encontrados

📅 QUARTA-FEIRA: Polish e Entrega

🌅 Manhã - Frontend e Integração (9h-12h):
1. [3h] Implementação Frontend + Integração
   - Seguir plano da Fase 11 (Integração Backend-Frontend)
   - Focar em features essenciais primeiro
   - Testar integração em tempo real

🌇 Tarde - Deploy e Documentação (14h-18h):
1. [2h] Deploy
   - Backend no Render
   - Frontend na Vercel
   - Testar em produção

2. [2h] Documentação Final
   - README completo
   - Documentação SOLID
   - Últimos ajustes
   - Teste final

🎯 Prioridades Absolutas:
1. ⭐️ Clock-in/out funcionando
2. ⭐️ Cálculo correto de horas
3. ⭐️ Autenticação básica
4. ⭐️ Frontend integrado e funcional
5. ⭐️ Deploy funcionando
6. ⭐️ Docker configurado (OBRIGATÓRIO)
7. ⭐️ Releitura do Figma (OBRIGATÓRIO)
8. ⭐️ Documentação completa

🏗️ Estrutura Simplificada:
```
/src
├── modules/
│   ├── users/
│   │   ├── controller.ts  # Login/registro
│   │   ├── service.ts     # Lógica de auth
│   │   └── repository.ts  # DB queries
│   └── clock/
│       ├── controller.ts  # Endpoints
│       ├── service.ts     # Regras de negócio
│       └── repository.ts  # DB queries
├── middlewares/
│   └── auth.ts           # JWT validation
└── utils/
    └── date.ts          # Helpers de data

# Arquivos Docker (OBRIGATÓRIOS)
/Dockerfile
/docker-compose.yml
/.dockerignore
```

📝 Regras Mínimas Viáveis:
1. Um usuário só pode ter um turno aberto
2. Clock-out sempre após clock-in
3. Calcular horas do dia corretamente
4. Autenticação básica funcionando
5. Frontend responsivo e usável

🎨 Frontend Mínimo:
1. Tela de login
2. Dashboard com:
   - Botão clock-in/out
   - Horas do dia
   - Histórico simples

🔧 Stack Final:
- Backend: Fastify + Supabase
- Frontend: React + TailwindCSS
- Deploy: Render + Vercel
- Containerização: Docker (OBRIGATÓRIO)

⚠️ Observações:
- Foco em qualidade > quantidade
- Testar bem o que for entregue
- Manter código limpo e documentado
- Priorizar UX nas features essenciais

📝 Regras de Negócio Core:

1. Registro de Ponto
   - Apenas um turno aberto por vez
   - Clock-out sempre posterior ao clock-in
   - Notas opcionais em cada registro

2. Cálculo de Horas
   - Total calculado no clock-out
   - Histórico por dia
   - Status atual do usuário

3. Validações
   - Verificar turno aberto antes de novo clock-in
   - Verificar turno existente antes de clock-out
   - Validar formato de datas/horas

4. Segurança
   - Autenticação via JWT
   - Proteção de rotas
   - Sanitização de inputs

🔧 Stack Tecnológico:

- Runtime: Node.js 18+
- Framework: Fastify
- Banco: Supabase (PostgreSQL)
- Validação: Zod
- Testes: Vitest + Supertest
- CI/CD: GitHub Actions
- Deploy: Render
- Containerização: Docker (OBRIGATÓRIO)

📦 Estrutura Final:

```
/src
├── app.ts                # App Fastify
├── server.ts             # Server startup
├── config/              
│   ├── database.ts      # Supabase config
│   └── env.ts           # Env vars
├── modules/             
│   ├── users/          
│   │   ├── controller.ts
│   │   ├── service.ts   
│   │   ├── repository.ts
│   │   └── types.ts     
│   └── clock/          
│       ├── controller.ts
│       ├── service.ts   
│       ├── repository.ts
│       └── types.ts     
├── middlewares/
│   ├── auth.ts
│   └── error-handler.ts
├── utils/
│   ├── date.ts
│   └── validation.ts
└── types/
    └── common.ts

# Arquivos Docker (OBRIGATÓRIOS)
/Dockerfile
/docker-compose.yml
/.dockerignore
```

🎯 Prioridades por Ordem:
1. Funcionalidade core de clock-in/out
2. Cálculo correto de horas
3. Autenticação e segurança
4. Consultas e histórico
5. Documentação e testes
6. Deploy e CI/CD
7. Docker configurado (OBRIGATÓRIO)
8. Releitura do Figma (OBRIGATÓRIO)

✅ Definir Regras de Negócio

Turno é aberto e fechado manualmente.

Só pode existir um turno aberto por vez.

Cálculo de horas com base em clock-in e clock-out.

Histórico por dia.

✅ Modelagem do Banco (Supabase/Postgres)

Tabelas:

users

clock_entries

✅ Setup do Projeto

Node.js + TypeScript

Fastify

Zod (validação)

Supabase Client

Prisma (opcional, mas recomendado se quiser ORM robusto)

ESLint + Prettier + Husky + lint-staged

Vitest + Supertest (testes)

🔧 Fase 2: Arquitetura Base
Criar estrutura de pastas:

bash
Copiar
Editar
/src
├── app.ts
├── server.ts
├── config/            # Conexões, env
├── modules/           # Domínios
│   └── clock/         # clock-entry
│       ├── controller/
│       ├── service/
│       ├── repository/
│       └── dto/
├── routes/            # Agrupamento de rotas
├── middlewares/
├── utils/
└── types/
🏗️ Fase 3: Implementação Funcional (Core)
Repository Layer (Acesso ao Supabase ou Prisma)

Service Layer (Regras de negócio puras)

Controller Layer (Entrada HTTP, validação)

Routes (Organização modular das rotas)

🧠 Fase 4: Middlewares e Error Handling
Handler global de erros.

Logs.

Validação.

(Opcional) Autenticação.

🧪 Fase 5: Testes
Unitários: services isolados.

Integração: endpoints simulando requests reais.

🐳 Fase 6: Infra e Deploy
Dockerfile

Docker Compose (para local com Supabase)

Deploy Render (backend) + Supabase (DB managed)

🔧 Fase 7: Docker (OBRIGATÓRIO)
Dockerfile para produção

docker-compose.yml para desenvolvimento

.dockerignore para otimização

🧪 Fase 8: Testes Específicos (OBRIGATÓRIO)
Testes unitários dos services

Testes de integração dos endpoints

Testes de regras de negócio

Testes de autenticação

🎨 Fase 9: Releitura do Figma (OBRIGATÓRIO)
Analisar protótipo original

Criar nova versão melhorada

Documentar mudanças de UX/UI

📋 Fase 10: Documentação SOLID (OBRIGATÓRIO)
S - Single Responsibility Principle
O - Open/Closed Principle  
L - Liskov Substitution Principle
I - Interface Segregation Principle
D - Dependency Inversion Principle

Documentar como cada princípio foi aplicado no código

🔄 Fase 12: Integração Backend-Frontend

1. Setup Inicial [1h]
   - Criar arquivo .env no frontend
   - Configurar CORS no backend (já feito)
   - Definir URLs base para cada ambiente:
     ```
     DEV: http://localhost:3000
     TEST: http://localhost:3001
     PROD: https://api.clockwise.com
     ```

2. Tipos Compartilhados [30min]
   - Criar pasta shared/types:
     ```typescript
     // auth.types.ts
     interface LoginPayload {
       email: string
       password: string
     }

     // clock.types.ts
     interface ClockEntry {
       id: string
       clockIn: Date
       clockOut: Date | null
       description: string | null
       status: string
       totalHours: number | null
     }

     // api.types.ts
     interface ApiResponse<T> {
       success: boolean
       data?: T
       error?: string
       message?: string
     }
     ```

3. Serviços de API [2h]
   - Implementar cliente HTTP (axios):
     ```typescript
     // services/api.ts
     const api = axios.create({
       baseURL: import.meta.env.VITE_API_URL
     })

     // Interceptor para token
     api.interceptors.request.use((config) => {
       const token = localStorage.getItem('token')
       if (token) {
         config.headers.Authorization = `Bearer ${token}`
       }
       return config
     })
     ```

   - Criar serviços específicos:
     ```typescript
     // services/auth.ts
     login(email, password)
     register(name, email, password)

     // services/clock.ts
     clockIn(description?)
     clockOut()
     getStatus()
     getHistory()
     ```

4. Gerenciamento de Estado [2h]
   - Configurar React Query:
     ```typescript
     // hooks/useClockStatus.ts
     export function useClockStatus() {
       return useQuery(['clock-status'], () => 
         api.get('/clock/status')
       )
     }

     // hooks/useClockHistory.ts
     export function useClockHistory() {
       return useQuery(['clock-history'], () => 
         api.get('/clock/history')
       )
     }
     ```

5. Testes de Integração [2h]
   - Testar fluxos principais:
     * Login → Clock-in → Status → Clock-out
     * Registro → Login → Histórico
   - Validar respostas da API
   - Testar tratamento de erros

6. Feedback e Loading States [1h]
   - Implementar toasts para:
     * Sucesso no clock-in/out
     * Erros de API
     * Validações
   - Loading states em:
     * Botões de ação
     * Carregamento de dados
     * Submissão de formulários

7. Cache e Performance [1h]
   - Configurar cache do React Query:
     * Invalidação após clock-in/out
     * Revalidação periódica do status
     * Prefetch de dados comuns

8. Testes E2E (Opcional) [2h]
   - Configurar Cypress
   - Testar fluxos completos
   - Validar integração real

📝 Checklist de Integração:
- [ ] Tipos compartilhados entre back/front
- [ ] Interceptors configurados
- [ ] Tratamento de erros
- [ ] Loading states
- [ ] Feedback visual
- [ ] Cache configurado
- [ ] Testes passando

⚠️ Pontos de Atenção:
1. Manter consistência nos tipos
2. Validar tokens JWT
3. Tratar erros de rede
4. Feedback claro ao usuário
5. Performance nas chamadas
6. Segurança nas requisições

🎯 Métricas de Sucesso:
1. Tempo de resposta < 300ms
2. Zero erros não tratados
3. Cache funcionando
4. Testes passando
5. UX fluida sem travamentos

Etapas do Projeto Clockwise:

1. Backend (Concluído)
   - Configuração inicial
   - Implementação dos módulos (users, clock)
   - Autenticação JWT
   - Validações
   - Testes de integração

2. Testes Unitários
   - Localização: /tests/unit/
   - Arquivos a serem testados:
     * /tests/unit/users/service.test.ts - testes do UserService
     * /tests/unit/clock/service.test.ts - testes do ClockService
   - Foco em testar:
     * Regras de negócio
     * Validações
     * Transformações de dados
     * Casos de erro

3. Frontend e Integração
   - Setup do projeto React
   - Implementação das telas
   - Integração com backend seguindo plano da Fase 12
   - Testes de integração

4. Deploy
   - Configuração dos ambientes
   - Deploy backend e frontend
   - Testes em produção

5. Documentação
   - API docs
   - Setup instructions
   - Deployment guide
   - Documentação SOLID
   - README final

